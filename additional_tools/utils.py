from aiogram.filters import Command
from aiogram.types import (Message, InlineKeyboardMarkup,
                           InlineKeyboardButton, CallbackQuery, FSInputFile)
from aiogram import Router

import json as js





def create_back(back_menu: str, text: str = "–≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥ üëà") -> InlineKeyboardMarkup:
    "–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, callback_data=back_menu)],
    ])

    return kb



class ReturnInfoJson:
     "–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ –∏–∑ JSON-–æ–±—ä–µ–∫—Ç–∞"

     def __init__(self, id: int):
         self.id = id                   # id –º–µ—Å—Ç–∞ –≤ JSON-–æ–±—ä–µ–∫—Ç–µ
         with open(r'data\inf_kavkaz.json', 'r', encoding='utf-8') as file:

            data = js.load(file)
            places = data["kavkav"] # –ú–∞—Å—Å–∏–≤ –º–µ—Å—Ç –≤ JSON-–æ–±—ä–µ–∫—Ç–µ
            place_id = next(place for place in places if place["id"] == id) # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ id
            photo_path = place_id["photo_path"] # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.name = place_id["name"]
            self.description = place_id["description"]
            self.photo = FSInputFile(photo_path)






class callback_handker_kavkaz():
    "–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤, –º–µ—Å—Ç–∞ –ö–∞–≤–∫–∞–∑"
    def __init__(self, id_js_object: int, callback_data: str, router: Router):
        self.js_object = ReturnInfoJson(id_js_object)  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –∏–∑ JSON-–æ–±—ä–µ–∫—Ç–∞
        self.callback_data = callback_data # –ö–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–µ
        self.router = router
        self.register_handlers()

    def register_handlers(self):
        # –ó–¥–µ—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞
        self.router.callback_query(lambda callback: callback.data == self.callback_data)(self.callback_processing)


    async def callback_processing (self, callback: CallbackQuery):

        await callback.message.bot.delete_message(chat_id=callback.message.chat.id,     # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                                  message_id=callback.message.message_id)

        await callback.message.answer_photo(   # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
            photo=self.js_object.photo,
            caption=self.js_object.description,
            reply_markup=create_back("kavkaz_info")
        )